// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lbrpc.proto

#include "lbrpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lbrpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostCallResult_lbrpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lbrpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostInfo_lbrpc_2eproto;
namespace lbrpc {
class HostInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostInfo> _instance;
} _HostInfo_default_instance_;
class GetRouteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRouteRequest> _instance;
} _GetRouteRequest_default_instance_;
class GetRouteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRouteResponse> _instance;
} _GetRouteResponse_default_instance_;
class HostCallResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostCallResult> _instance;
} _HostCallResult_default_instance_;
class ReportStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReportStatusRequest> _instance;
} _ReportStatusRequest_default_instance_;
class GetHostRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetHostRequest> _instance;
} _GetHostRequest_default_instance_;
class GetHostResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetHostResponse> _instance;
} _GetHostResponse_default_instance_;
class ReportRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReportRequest> _instance;
} _ReportRequest_default_instance_;
}  // namespace lbrpc
static void InitDefaultsscc_info_GetHostRequest_lbrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lbrpc::_GetHostRequest_default_instance_;
    new (ptr) ::lbrpc::GetHostRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lbrpc::GetHostRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetHostRequest_lbrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetHostRequest_lbrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetHostResponse_lbrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lbrpc::_GetHostResponse_default_instance_;
    new (ptr) ::lbrpc::GetHostResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lbrpc::GetHostResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetHostResponse_lbrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetHostResponse_lbrpc_2eproto}, {
      &scc_info_HostInfo_lbrpc_2eproto.base,}};

static void InitDefaultsscc_info_GetRouteRequest_lbrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lbrpc::_GetRouteRequest_default_instance_;
    new (ptr) ::lbrpc::GetRouteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lbrpc::GetRouteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRouteRequest_lbrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetRouteRequest_lbrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetRouteResponse_lbrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lbrpc::_GetRouteResponse_default_instance_;
    new (ptr) ::lbrpc::GetRouteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lbrpc::GetRouteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetRouteResponse_lbrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetRouteResponse_lbrpc_2eproto}, {
      &scc_info_HostInfo_lbrpc_2eproto.base,}};

static void InitDefaultsscc_info_HostCallResult_lbrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lbrpc::_HostCallResult_default_instance_;
    new (ptr) ::lbrpc::HostCallResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lbrpc::HostCallResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostCallResult_lbrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HostCallResult_lbrpc_2eproto}, {}};

static void InitDefaultsscc_info_HostInfo_lbrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lbrpc::_HostInfo_default_instance_;
    new (ptr) ::lbrpc::HostInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lbrpc::HostInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostInfo_lbrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HostInfo_lbrpc_2eproto}, {}};

static void InitDefaultsscc_info_ReportRequest_lbrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lbrpc::_ReportRequest_default_instance_;
    new (ptr) ::lbrpc::ReportRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lbrpc::ReportRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReportRequest_lbrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReportRequest_lbrpc_2eproto}, {
      &scc_info_HostInfo_lbrpc_2eproto.base,}};

static void InitDefaultsscc_info_ReportStatusRequest_lbrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lbrpc::_ReportStatusRequest_default_instance_;
    new (ptr) ::lbrpc::ReportStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lbrpc::ReportStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReportStatusRequest_lbrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReportStatusRequest_lbrpc_2eproto}, {
      &scc_info_HostCallResult_lbrpc_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lbrpc_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_lbrpc_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lbrpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lbrpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lbrpc::HostInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lbrpc::HostInfo, ip_),
  PROTOBUF_FIELD_OFFSET(::lbrpc::HostInfo, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lbrpc::GetRouteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lbrpc::GetRouteRequest, modid_),
  PROTOBUF_FIELD_OFFSET(::lbrpc::GetRouteRequest, cmdid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lbrpc::GetRouteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lbrpc::GetRouteResponse, modid_),
  PROTOBUF_FIELD_OFFSET(::lbrpc::GetRouteResponse, cmdid_),
  PROTOBUF_FIELD_OFFSET(::lbrpc::GetRouteResponse, host_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lbrpc::HostCallResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lbrpc::HostCallResult, ip_),
  PROTOBUF_FIELD_OFFSET(::lbrpc::HostCallResult, port_),
  PROTOBUF_FIELD_OFFSET(::lbrpc::HostCallResult, succ_),
  PROTOBUF_FIELD_OFFSET(::lbrpc::HostCallResult, err_),
  PROTOBUF_FIELD_OFFSET(::lbrpc::HostCallResult, overload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lbrpc::ReportStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lbrpc::ReportStatusRequest, modid_),
  PROTOBUF_FIELD_OFFSET(::lbrpc::ReportStatusRequest, cmdid_),
  PROTOBUF_FIELD_OFFSET(::lbrpc::ReportStatusRequest, caller_),
  PROTOBUF_FIELD_OFFSET(::lbrpc::ReportStatusRequest, results_),
  PROTOBUF_FIELD_OFFSET(::lbrpc::ReportStatusRequest, ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lbrpc::GetHostRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lbrpc::GetHostRequest, seq_),
  PROTOBUF_FIELD_OFFSET(::lbrpc::GetHostRequest, modid_),
  PROTOBUF_FIELD_OFFSET(::lbrpc::GetHostRequest, cmdid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lbrpc::GetHostResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lbrpc::GetHostResponse, seq_),
  PROTOBUF_FIELD_OFFSET(::lbrpc::GetHostResponse, modid_),
  PROTOBUF_FIELD_OFFSET(::lbrpc::GetHostResponse, cmdid_),
  PROTOBUF_FIELD_OFFSET(::lbrpc::GetHostResponse, retcode_),
  PROTOBUF_FIELD_OFFSET(::lbrpc::GetHostResponse, host_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lbrpc::ReportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lbrpc::ReportRequest, modid_),
  PROTOBUF_FIELD_OFFSET(::lbrpc::ReportRequest, cmdid_),
  PROTOBUF_FIELD_OFFSET(::lbrpc::ReportRequest, host_),
  PROTOBUF_FIELD_OFFSET(::lbrpc::ReportRequest, retcode_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::lbrpc::HostInfo)},
  { 7, -1, sizeof(::lbrpc::GetRouteRequest)},
  { 14, -1, sizeof(::lbrpc::GetRouteResponse)},
  { 22, -1, sizeof(::lbrpc::HostCallResult)},
  { 32, -1, sizeof(::lbrpc::ReportStatusRequest)},
  { 42, -1, sizeof(::lbrpc::GetHostRequest)},
  { 50, -1, sizeof(::lbrpc::GetHostResponse)},
  { 60, -1, sizeof(::lbrpc::ReportRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lbrpc::_HostInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lbrpc::_GetRouteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lbrpc::_GetRouteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lbrpc::_HostCallResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lbrpc::_ReportStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lbrpc::_GetHostRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lbrpc::_GetHostResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lbrpc::_ReportRequest_default_instance_),
};

const char descriptor_table_protodef_lbrpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013lbrpc.proto\022\005lbrpc\"$\n\010HostInfo\022\n\n\002ip\030\001"
  " \001(\005\022\014\n\004port\030\002 \001(\005\"/\n\017GetRouteRequest\022\r\n"
  "\005modid\030\001 \001(\005\022\r\n\005cmdid\030\002 \001(\005\"O\n\020GetRouteR"
  "esponse\022\r\n\005modid\030\001 \001(\005\022\r\n\005cmdid\030\002 \001(\005\022\035\n"
  "\004host\030\003 \003(\0132\017.lbrpc.HostInfo\"W\n\016HostCall"
  "Result\022\n\n\002ip\030\001 \001(\005\022\014\n\004port\030\002 \001(\005\022\014\n\004succ"
  "\030\003 \001(\r\022\013\n\003err\030\004 \001(\r\022\020\n\010overload\030\005 \001(\010\"w\n"
  "\023ReportStatusRequest\022\r\n\005modid\030\001 \001(\005\022\r\n\005c"
  "mdid\030\002 \001(\005\022\016\n\006caller\030\003 \001(\005\022&\n\007results\030\004 "
  "\003(\0132\025.lbrpc.HostCallResult\022\n\n\002ts\030\005 \001(\r\";"
  "\n\016GetHostRequest\022\013\n\003seq\030\001 \001(\r\022\r\n\005modid\030\002"
  " \001(\005\022\r\n\005cmdid\030\003 \001(\005\"l\n\017GetHostResponse\022\013"
  "\n\003seq\030\001 \001(\r\022\r\n\005modid\030\002 \001(\005\022\r\n\005cmdid\030\003 \001("
  "\005\022\017\n\007retcode\030\004 \001(\005\022\035\n\004host\030\005 \001(\0132\017.lbrpc"
  ".HostInfo\"]\n\rReportRequest\022\r\n\005modid\030\001 \001("
  "\005\022\r\n\005cmdid\030\002 \001(\005\022\035\n\004host\030\003 \001(\0132\017.lbrpc.H"
  "ostInfo\022\017\n\007retcode\030\004 \001(\005*\345\001\n\tMessageId\022\r"
  "\n\tID_UNKNOW\020\000\022\026\n\022ID_GetRouteRequest\020\001\022\027\n"
  "\023ID_GetRouteResponse\020\002\022\032\n\026ID_ReportStatu"
  "sRequest\020\003\022\025\n\021ID_GetHostRequest\020\004\022\026\n\022ID_"
  "GetHostResponse\020\005\022\024\n\020ID_ReportRequest\020\006\022"
  "\032\n\026ID_API_GetRouteRequest\020\007\022\033\n\027ID_API_Ge"
  "tRouteResponse\020\010*T\n\013LarsRetCode\022\014\n\010RET_S"
  "UCC\020\000\022\020\n\014RET_OVERLOAD\020\001\022\024\n\020RET_SYSTEM_ER"
  "ROR\020\002\022\017\n\013RET_NOEXIST\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lbrpc_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lbrpc_2eproto_sccs[8] = {
  &scc_info_GetHostRequest_lbrpc_2eproto.base,
  &scc_info_GetHostResponse_lbrpc_2eproto.base,
  &scc_info_GetRouteRequest_lbrpc_2eproto.base,
  &scc_info_GetRouteResponse_lbrpc_2eproto.base,
  &scc_info_HostCallResult_lbrpc_2eproto.base,
  &scc_info_HostInfo_lbrpc_2eproto.base,
  &scc_info_ReportRequest_lbrpc_2eproto.base,
  &scc_info_ReportStatusRequest_lbrpc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lbrpc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lbrpc_2eproto = {
  false, false, descriptor_table_protodef_lbrpc_2eproto, "lbrpc.proto", 990,
  &descriptor_table_lbrpc_2eproto_once, descriptor_table_lbrpc_2eproto_sccs, descriptor_table_lbrpc_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_lbrpc_2eproto::offsets,
  file_level_metadata_lbrpc_2eproto, 8, file_level_enum_descriptors_lbrpc_2eproto, file_level_service_descriptors_lbrpc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lbrpc_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lbrpc_2eproto)), true);
namespace lbrpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lbrpc_2eproto);
  return file_level_enum_descriptors_lbrpc_2eproto[0];
}
bool MessageId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LarsRetCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lbrpc_2eproto);
  return file_level_enum_descriptors_lbrpc_2eproto[1];
}
bool LarsRetCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void HostInfo::InitAsDefaultInstance() {
}
class HostInfo::_Internal {
 public:
};

HostInfo::HostInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lbrpc.HostInfo)
}
HostInfo::HostInfo(const HostInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ip_, &from.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:lbrpc.HostInfo)
}

void HostInfo::SharedCtor() {
  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(port_));
}

HostInfo::~HostInfo() {
  // @@protoc_insertion_point(destructor:lbrpc.HostInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HostInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HostInfo::ArenaDtor(void* object) {
  HostInfo* _this = reinterpret_cast< HostInfo* >(object);
  (void)_this;
}
void HostInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HostInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostInfo& HostInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostInfo_lbrpc_2eproto.base);
  return *internal_default_instance();
}


void HostInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:lbrpc.HostInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbrpc.HostInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ip = 1;
  if (this->ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ip(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lbrpc.HostInfo)
  return target;
}

size_t HostInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbrpc.HostInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ip = 1;
  if (this->ip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ip());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbrpc.HostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HostInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbrpc.HostInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbrpc.HostInfo)
    MergeFrom(*source);
  }
}

void HostInfo::MergeFrom(const HostInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbrpc.HostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip() != 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void HostInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbrpc.HostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostInfo::CopyFrom(const HostInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbrpc.HostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostInfo::IsInitialized() const {
  return true;
}

void HostInfo::InternalSwap(HostInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostInfo, port_)
      + sizeof(HostInfo::port_)
      - PROTOBUF_FIELD_OFFSET(HostInfo, ip_)>(
          reinterpret_cast<char*>(&ip_),
          reinterpret_cast<char*>(&other->ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HostInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRouteRequest::InitAsDefaultInstance() {
}
class GetRouteRequest::_Internal {
 public:
};

GetRouteRequest::GetRouteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lbrpc.GetRouteRequest)
}
GetRouteRequest::GetRouteRequest(const GetRouteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&modid_, &from.modid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmdid_) -
    reinterpret_cast<char*>(&modid_)) + sizeof(cmdid_));
  // @@protoc_insertion_point(copy_constructor:lbrpc.GetRouteRequest)
}

void GetRouteRequest::SharedCtor() {
  ::memset(&modid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmdid_) -
      reinterpret_cast<char*>(&modid_)) + sizeof(cmdid_));
}

GetRouteRequest::~GetRouteRequest() {
  // @@protoc_insertion_point(destructor:lbrpc.GetRouteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetRouteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetRouteRequest::ArenaDtor(void* object) {
  GetRouteRequest* _this = reinterpret_cast< GetRouteRequest* >(object);
  (void)_this;
}
void GetRouteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRouteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRouteRequest& GetRouteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRouteRequest_lbrpc_2eproto.base);
  return *internal_default_instance();
}


void GetRouteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lbrpc.GetRouteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&modid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmdid_) -
      reinterpret_cast<char*>(&modid_)) + sizeof(cmdid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRouteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 modid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          modid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cmdid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cmdid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRouteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbrpc.GetRouteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 modid = 1;
  if (this->modid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_modid(), target);
  }

  // int32 cmdid = 2;
  if (this->cmdid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cmdid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lbrpc.GetRouteRequest)
  return target;
}

size_t GetRouteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbrpc.GetRouteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 modid = 1;
  if (this->modid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_modid());
  }

  // int32 cmdid = 2;
  if (this->cmdid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cmdid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRouteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbrpc.GetRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRouteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRouteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbrpc.GetRouteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbrpc.GetRouteRequest)
    MergeFrom(*source);
  }
}

void GetRouteRequest::MergeFrom(const GetRouteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbrpc.GetRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.modid() != 0) {
    _internal_set_modid(from._internal_modid());
  }
  if (from.cmdid() != 0) {
    _internal_set_cmdid(from._internal_cmdid());
  }
}

void GetRouteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbrpc.GetRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRouteRequest::CopyFrom(const GetRouteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbrpc.GetRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRouteRequest::IsInitialized() const {
  return true;
}

void GetRouteRequest::InternalSwap(GetRouteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetRouteRequest, cmdid_)
      + sizeof(GetRouteRequest::cmdid_)
      - PROTOBUF_FIELD_OFFSET(GetRouteRequest, modid_)>(
          reinterpret_cast<char*>(&modid_),
          reinterpret_cast<char*>(&other->modid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRouteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRouteResponse::InitAsDefaultInstance() {
}
class GetRouteResponse::_Internal {
 public:
};

GetRouteResponse::GetRouteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  host_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lbrpc.GetRouteResponse)
}
GetRouteResponse::GetRouteResponse(const GetRouteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      host_(from.host_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&modid_, &from.modid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmdid_) -
    reinterpret_cast<char*>(&modid_)) + sizeof(cmdid_));
  // @@protoc_insertion_point(copy_constructor:lbrpc.GetRouteResponse)
}

void GetRouteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRouteResponse_lbrpc_2eproto.base);
  ::memset(&modid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmdid_) -
      reinterpret_cast<char*>(&modid_)) + sizeof(cmdid_));
}

GetRouteResponse::~GetRouteResponse() {
  // @@protoc_insertion_point(destructor:lbrpc.GetRouteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetRouteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetRouteResponse::ArenaDtor(void* object) {
  GetRouteResponse* _this = reinterpret_cast< GetRouteResponse* >(object);
  (void)_this;
}
void GetRouteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRouteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRouteResponse& GetRouteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRouteResponse_lbrpc_2eproto.base);
  return *internal_default_instance();
}


void GetRouteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lbrpc.GetRouteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.Clear();
  ::memset(&modid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmdid_) -
      reinterpret_cast<char*>(&modid_)) + sizeof(cmdid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRouteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 modid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          modid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cmdid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cmdid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lbrpc.HostInfo host = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_host(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRouteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbrpc.GetRouteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 modid = 1;
  if (this->modid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_modid(), target);
  }

  // int32 cmdid = 2;
  if (this->cmdid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cmdid(), target);
  }

  // repeated .lbrpc.HostInfo host = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_host_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_host(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lbrpc.GetRouteResponse)
  return target;
}

size_t GetRouteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbrpc.GetRouteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lbrpc.HostInfo host = 3;
  total_size += 1UL * this->_internal_host_size();
  for (const auto& msg : this->host_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 modid = 1;
  if (this->modid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_modid());
  }

  // int32 cmdid = 2;
  if (this->cmdid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cmdid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRouteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbrpc.GetRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRouteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRouteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbrpc.GetRouteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbrpc.GetRouteResponse)
    MergeFrom(*source);
  }
}

void GetRouteResponse::MergeFrom(const GetRouteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbrpc.GetRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  host_.MergeFrom(from.host_);
  if (from.modid() != 0) {
    _internal_set_modid(from._internal_modid());
  }
  if (from.cmdid() != 0) {
    _internal_set_cmdid(from._internal_cmdid());
  }
}

void GetRouteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbrpc.GetRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRouteResponse::CopyFrom(const GetRouteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbrpc.GetRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRouteResponse::IsInitialized() const {
  return true;
}

void GetRouteResponse::InternalSwap(GetRouteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  host_.InternalSwap(&other->host_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetRouteResponse, cmdid_)
      + sizeof(GetRouteResponse::cmdid_)
      - PROTOBUF_FIELD_OFFSET(GetRouteResponse, modid_)>(
          reinterpret_cast<char*>(&modid_),
          reinterpret_cast<char*>(&other->modid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRouteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostCallResult::InitAsDefaultInstance() {
}
class HostCallResult::_Internal {
 public:
};

HostCallResult::HostCallResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lbrpc.HostCallResult)
}
HostCallResult::HostCallResult(const HostCallResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ip_, &from.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&overload_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(overload_));
  // @@protoc_insertion_point(copy_constructor:lbrpc.HostCallResult)
}

void HostCallResult::SharedCtor() {
  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overload_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(overload_));
}

HostCallResult::~HostCallResult() {
  // @@protoc_insertion_point(destructor:lbrpc.HostCallResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HostCallResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HostCallResult::ArenaDtor(void* object) {
  HostCallResult* _this = reinterpret_cast< HostCallResult* >(object);
  (void)_this;
}
void HostCallResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HostCallResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostCallResult& HostCallResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostCallResult_lbrpc_2eproto.base);
  return *internal_default_instance();
}


void HostCallResult::Clear() {
// @@protoc_insertion_point(message_clear_start:lbrpc.HostCallResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overload_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(overload_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostCallResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 succ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          succ_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 err = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool overload = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          overload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostCallResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbrpc.HostCallResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ip = 1;
  if (this->ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ip(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  // uint32 succ = 3;
  if (this->succ() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_succ(), target);
  }

  // uint32 err = 4;
  if (this->err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_err(), target);
  }

  // bool overload = 5;
  if (this->overload() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_overload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lbrpc.HostCallResult)
  return target;
}

size_t HostCallResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbrpc.HostCallResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ip = 1;
  if (this->ip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ip());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  // uint32 succ = 3;
  if (this->succ() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_succ());
  }

  // uint32 err = 4;
  if (this->err() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_err());
  }

  // bool overload = 5;
  if (this->overload() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostCallResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbrpc.HostCallResult)
  GOOGLE_DCHECK_NE(&from, this);
  const HostCallResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostCallResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbrpc.HostCallResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbrpc.HostCallResult)
    MergeFrom(*source);
  }
}

void HostCallResult::MergeFrom(const HostCallResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbrpc.HostCallResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip() != 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.succ() != 0) {
    _internal_set_succ(from._internal_succ());
  }
  if (from.err() != 0) {
    _internal_set_err(from._internal_err());
  }
  if (from.overload() != 0) {
    _internal_set_overload(from._internal_overload());
  }
}

void HostCallResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbrpc.HostCallResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostCallResult::CopyFrom(const HostCallResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbrpc.HostCallResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostCallResult::IsInitialized() const {
  return true;
}

void HostCallResult::InternalSwap(HostCallResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostCallResult, overload_)
      + sizeof(HostCallResult::overload_)
      - PROTOBUF_FIELD_OFFSET(HostCallResult, ip_)>(
          reinterpret_cast<char*>(&ip_),
          reinterpret_cast<char*>(&other->ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HostCallResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReportStatusRequest::InitAsDefaultInstance() {
}
class ReportStatusRequest::_Internal {
 public:
};

ReportStatusRequest::ReportStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lbrpc.ReportStatusRequest)
}
ReportStatusRequest::ReportStatusRequest(const ReportStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&modid_, &from.modid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ts_) -
    reinterpret_cast<char*>(&modid_)) + sizeof(ts_));
  // @@protoc_insertion_point(copy_constructor:lbrpc.ReportStatusRequest)
}

void ReportStatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReportStatusRequest_lbrpc_2eproto.base);
  ::memset(&modid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&modid_)) + sizeof(ts_));
}

ReportStatusRequest::~ReportStatusRequest() {
  // @@protoc_insertion_point(destructor:lbrpc.ReportStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReportStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReportStatusRequest::ArenaDtor(void* object) {
  ReportStatusRequest* _this = reinterpret_cast< ReportStatusRequest* >(object);
  (void)_this;
}
void ReportStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReportStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportStatusRequest& ReportStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReportStatusRequest_lbrpc_2eproto.base);
  return *internal_default_instance();
}


void ReportStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lbrpc.ReportStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  ::memset(&modid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&modid_)) + sizeof(ts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 modid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          modid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cmdid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cmdid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 caller = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          caller_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lbrpc.HostCallResult results = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 ts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReportStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbrpc.ReportStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 modid = 1;
  if (this->modid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_modid(), target);
  }

  // int32 cmdid = 2;
  if (this->cmdid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cmdid(), target);
  }

  // int32 caller = 3;
  if (this->caller() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_caller(), target);
  }

  // repeated .lbrpc.HostCallResult results = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_results(i), target, stream);
  }

  // uint32 ts = 5;
  if (this->ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lbrpc.ReportStatusRequest)
  return target;
}

size_t ReportStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbrpc.ReportStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lbrpc.HostCallResult results = 4;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 modid = 1;
  if (this->modid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_modid());
  }

  // int32 cmdid = 2;
  if (this->cmdid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cmdid());
  }

  // int32 caller = 3;
  if (this->caller() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_caller());
  }

  // uint32 ts = 5;
  if (this->ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbrpc.ReportStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReportStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbrpc.ReportStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbrpc.ReportStatusRequest)
    MergeFrom(*source);
  }
}

void ReportStatusRequest::MergeFrom(const ReportStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbrpc.ReportStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.modid() != 0) {
    _internal_set_modid(from._internal_modid());
  }
  if (from.cmdid() != 0) {
    _internal_set_cmdid(from._internal_cmdid());
  }
  if (from.caller() != 0) {
    _internal_set_caller(from._internal_caller());
  }
  if (from.ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
}

void ReportStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbrpc.ReportStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportStatusRequest::CopyFrom(const ReportStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbrpc.ReportStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportStatusRequest::IsInitialized() const {
  return true;
}

void ReportStatusRequest::InternalSwap(ReportStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReportStatusRequest, ts_)
      + sizeof(ReportStatusRequest::ts_)
      - PROTOBUF_FIELD_OFFSET(ReportStatusRequest, modid_)>(
          reinterpret_cast<char*>(&modid_),
          reinterpret_cast<char*>(&other->modid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetHostRequest::InitAsDefaultInstance() {
}
class GetHostRequest::_Internal {
 public:
};

GetHostRequest::GetHostRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lbrpc.GetHostRequest)
}
GetHostRequest::GetHostRequest(const GetHostRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmdid_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(cmdid_));
  // @@protoc_insertion_point(copy_constructor:lbrpc.GetHostRequest)
}

void GetHostRequest::SharedCtor() {
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmdid_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(cmdid_));
}

GetHostRequest::~GetHostRequest() {
  // @@protoc_insertion_point(destructor:lbrpc.GetHostRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetHostRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetHostRequest::ArenaDtor(void* object) {
  GetHostRequest* _this = reinterpret_cast< GetHostRequest* >(object);
  (void)_this;
}
void GetHostRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetHostRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetHostRequest& GetHostRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetHostRequest_lbrpc_2eproto.base);
  return *internal_default_instance();
}


void GetHostRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lbrpc.GetHostRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmdid_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(cmdid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetHostRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 modid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          modid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cmdid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cmdid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetHostRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbrpc.GetHostRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seq = 1;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seq(), target);
  }

  // int32 modid = 2;
  if (this->modid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_modid(), target);
  }

  // int32 cmdid = 3;
  if (this->cmdid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cmdid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lbrpc.GetHostRequest)
  return target;
}

size_t GetHostRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbrpc.GetHostRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 seq = 1;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seq());
  }

  // int32 modid = 2;
  if (this->modid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_modid());
  }

  // int32 cmdid = 3;
  if (this->cmdid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cmdid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetHostRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbrpc.GetHostRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetHostRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetHostRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbrpc.GetHostRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbrpc.GetHostRequest)
    MergeFrom(*source);
  }
}

void GetHostRequest::MergeFrom(const GetHostRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbrpc.GetHostRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.modid() != 0) {
    _internal_set_modid(from._internal_modid());
  }
  if (from.cmdid() != 0) {
    _internal_set_cmdid(from._internal_cmdid());
  }
}

void GetHostRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbrpc.GetHostRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHostRequest::CopyFrom(const GetHostRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbrpc.GetHostRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHostRequest::IsInitialized() const {
  return true;
}

void GetHostRequest::InternalSwap(GetHostRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetHostRequest, cmdid_)
      + sizeof(GetHostRequest::cmdid_)
      - PROTOBUF_FIELD_OFFSET(GetHostRequest, seq_)>(
          reinterpret_cast<char*>(&seq_),
          reinterpret_cast<char*>(&other->seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHostRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetHostResponse::InitAsDefaultInstance() {
  ::lbrpc::_GetHostResponse_default_instance_._instance.get_mutable()->host_ = const_cast< ::lbrpc::HostInfo*>(
      ::lbrpc::HostInfo::internal_default_instance());
}
class GetHostResponse::_Internal {
 public:
  static const ::lbrpc::HostInfo& host(const GetHostResponse* msg);
};

const ::lbrpc::HostInfo&
GetHostResponse::_Internal::host(const GetHostResponse* msg) {
  return *msg->host_;
}
GetHostResponse::GetHostResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lbrpc.GetHostResponse)
}
GetHostResponse::GetHostResponse(const GetHostResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_host()) {
    host_ = new ::lbrpc::HostInfo(*from.host_);
  } else {
    host_ = nullptr;
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:lbrpc.GetHostResponse)
}

void GetHostResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetHostResponse_lbrpc_2eproto.base);
  ::memset(&host_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&host_)) + sizeof(retcode_));
}

GetHostResponse::~GetHostResponse() {
  // @@protoc_insertion_point(destructor:lbrpc.GetHostResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetHostResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete host_;
}

void GetHostResponse::ArenaDtor(void* object) {
  GetHostResponse* _this = reinterpret_cast< GetHostResponse* >(object);
  (void)_this;
}
void GetHostResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetHostResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetHostResponse& GetHostResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetHostResponse_lbrpc_2eproto.base);
  return *internal_default_instance();
}


void GetHostResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lbrpc.GetHostResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && host_ != nullptr) {
    delete host_;
  }
  host_ = nullptr;
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(retcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetHostResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 modid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          modid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cmdid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cmdid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 retcode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lbrpc.HostInfo host = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_host(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetHostResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbrpc.GetHostResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seq = 1;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seq(), target);
  }

  // int32 modid = 2;
  if (this->modid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_modid(), target);
  }

  // int32 cmdid = 3;
  if (this->cmdid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cmdid(), target);
  }

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_retcode(), target);
  }

  // .lbrpc.HostInfo host = 5;
  if (this->has_host()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::host(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lbrpc.GetHostResponse)
  return target;
}

size_t GetHostResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbrpc.GetHostResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lbrpc.HostInfo host = 5;
  if (this->has_host()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *host_);
  }

  // uint32 seq = 1;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seq());
  }

  // int32 modid = 2;
  if (this->modid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_modid());
  }

  // int32 cmdid = 3;
  if (this->cmdid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cmdid());
  }

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetHostResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbrpc.GetHostResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetHostResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetHostResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbrpc.GetHostResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbrpc.GetHostResponse)
    MergeFrom(*source);
  }
}

void GetHostResponse::MergeFrom(const GetHostResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbrpc.GetHostResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_host()) {
    _internal_mutable_host()->::lbrpc::HostInfo::MergeFrom(from._internal_host());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.modid() != 0) {
    _internal_set_modid(from._internal_modid());
  }
  if (from.cmdid() != 0) {
    _internal_set_cmdid(from._internal_cmdid());
  }
  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void GetHostResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbrpc.GetHostResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHostResponse::CopyFrom(const GetHostResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbrpc.GetHostResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHostResponse::IsInitialized() const {
  return true;
}

void GetHostResponse::InternalSwap(GetHostResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetHostResponse, retcode_)
      + sizeof(GetHostResponse::retcode_)
      - PROTOBUF_FIELD_OFFSET(GetHostResponse, host_)>(
          reinterpret_cast<char*>(&host_),
          reinterpret_cast<char*>(&other->host_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHostResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReportRequest::InitAsDefaultInstance() {
  ::lbrpc::_ReportRequest_default_instance_._instance.get_mutable()->host_ = const_cast< ::lbrpc::HostInfo*>(
      ::lbrpc::HostInfo::internal_default_instance());
}
class ReportRequest::_Internal {
 public:
  static const ::lbrpc::HostInfo& host(const ReportRequest* msg);
};

const ::lbrpc::HostInfo&
ReportRequest::_Internal::host(const ReportRequest* msg) {
  return *msg->host_;
}
ReportRequest::ReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lbrpc.ReportRequest)
}
ReportRequest::ReportRequest(const ReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_host()) {
    host_ = new ::lbrpc::HostInfo(*from.host_);
  } else {
    host_ = nullptr;
  }
  ::memcpy(&modid_, &from.modid_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&modid_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:lbrpc.ReportRequest)
}

void ReportRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReportRequest_lbrpc_2eproto.base);
  ::memset(&host_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&host_)) + sizeof(retcode_));
}

ReportRequest::~ReportRequest() {
  // @@protoc_insertion_point(destructor:lbrpc.ReportRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReportRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete host_;
}

void ReportRequest::ArenaDtor(void* object) {
  ReportRequest* _this = reinterpret_cast< ReportRequest* >(object);
  (void)_this;
}
void ReportRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportRequest& ReportRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReportRequest_lbrpc_2eproto.base);
  return *internal_default_instance();
}


void ReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lbrpc.ReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && host_ != nullptr) {
    delete host_;
  }
  host_ = nullptr;
  ::memset(&modid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&modid_)) + sizeof(retcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 modid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          modid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cmdid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cmdid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lbrpc.HostInfo host = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_host(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 retcode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReportRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbrpc.ReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 modid = 1;
  if (this->modid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_modid(), target);
  }

  // int32 cmdid = 2;
  if (this->cmdid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cmdid(), target);
  }

  // .lbrpc.HostInfo host = 3;
  if (this->has_host()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::host(this), target, stream);
  }

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lbrpc.ReportRequest)
  return target;
}

size_t ReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbrpc.ReportRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lbrpc.HostInfo host = 3;
  if (this->has_host()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *host_);
  }

  // int32 modid = 1;
  if (this->modid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_modid());
  }

  // int32 cmdid = 2;
  if (this->cmdid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cmdid());
  }

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbrpc.ReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReportRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbrpc.ReportRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbrpc.ReportRequest)
    MergeFrom(*source);
  }
}

void ReportRequest::MergeFrom(const ReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbrpc.ReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_host()) {
    _internal_mutable_host()->::lbrpc::HostInfo::MergeFrom(from._internal_host());
  }
  if (from.modid() != 0) {
    _internal_set_modid(from._internal_modid());
  }
  if (from.cmdid() != 0) {
    _internal_set_cmdid(from._internal_cmdid());
  }
  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void ReportRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbrpc.ReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportRequest::CopyFrom(const ReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbrpc.ReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportRequest::IsInitialized() const {
  return true;
}

void ReportRequest::InternalSwap(ReportRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReportRequest, retcode_)
      + sizeof(ReportRequest::retcode_)
      - PROTOBUF_FIELD_OFFSET(ReportRequest, host_)>(
          reinterpret_cast<char*>(&host_),
          reinterpret_cast<char*>(&other->host_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lbrpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lbrpc::HostInfo* Arena::CreateMaybeMessage< ::lbrpc::HostInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lbrpc::HostInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::lbrpc::GetRouteRequest* Arena::CreateMaybeMessage< ::lbrpc::GetRouteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lbrpc::GetRouteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lbrpc::GetRouteResponse* Arena::CreateMaybeMessage< ::lbrpc::GetRouteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lbrpc::GetRouteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lbrpc::HostCallResult* Arena::CreateMaybeMessage< ::lbrpc::HostCallResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lbrpc::HostCallResult >(arena);
}
template<> PROTOBUF_NOINLINE ::lbrpc::ReportStatusRequest* Arena::CreateMaybeMessage< ::lbrpc::ReportStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lbrpc::ReportStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lbrpc::GetHostRequest* Arena::CreateMaybeMessage< ::lbrpc::GetHostRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lbrpc::GetHostRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lbrpc::GetHostResponse* Arena::CreateMaybeMessage< ::lbrpc::GetHostResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lbrpc::GetHostResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lbrpc::ReportRequest* Arena::CreateMaybeMessage< ::lbrpc::ReportRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lbrpc::ReportRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
